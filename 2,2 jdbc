import java.io.*;
import java.util.*;

// Serializable Student class for Part B
class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    int studentID;
    String name;
    String grade;

    public Student(int studentID, String name, String grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    public void displayInfo() {
        System.out.println("Student ID: " + studentID);
        System.out.println("Name: " + name);
        System.out.println("Grade: " + grade);
    }
}

// Employee class for Part C
class Employee {
    String name;
    int id;
    String designation;
    double salary;

    public Employee(String name, int id, String designation, double salary) {
        this.name = name;
        this.id = id;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return id + " | " + name + " | " + designation + " | " + salary;
    }
}

public class CombinedProgram {
    private static final String EMPLOYEE_FILE = "employees.txt";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n==============================");
            System.out.println("      MAIN MENU");
            System.out.println("==============================");
            System.out.println("1. Sum of Integers (Autoboxing & Unboxing)");
            System.out.println("2. Student Serialization & Deserialization");
            System.out.println("3. Employee Management System (File Handling)");
            System.out.println("4. Exit");
            System.out.println("==============================");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (choice) {
                case 1 -> sumOfIntegers(sc);
                case 2 -> studentSerialization(sc);
                case 3 -> employeeMenu(sc);
                case 4 -> System.out.println("Exiting... Thank you!");
                default -> System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 4);

        sc.close();
    }

    // ------------------- PART A -------------------
    private static void sumOfIntegers(Scanner sc) {
        System.out.println("\n--- Sum of Integers Using Autoboxing & Unboxing ---");
        System.out.println("Enter integers separated by space:");
        String input = sc.nextLine();

        String[] inputs = input.split(" ");
        ArrayList<Integer> numbers = new ArrayList<>();

        for (String str : inputs) {
            Integer num = Integer.parseInt(str); // String to Integer (Autoboxing)
            numbers.add(num);
        }

        int sum = 0;
        for (Integer n : numbers) {
            sum += n; // Unboxing
        }

        System.out.println("Sum of entered integers: " + sum);
    }

    // ------------------- PART B -------------------
    private static void studentSerialization(Scanner sc) {
        System.out.println("\n--- Student Serialization & Deserialization ---");

        try {
            System.out.print("Enter Student ID: ");
            int id = sc.nextInt();
            sc.nextLine();

            System.out.print("Enter Name: ");
            String name = sc.nextLine();

            System.out.print("Enter Grade: ");
            String grade = sc.nextLine();

            Student student = new Student(id, name, grade);

            // Serialization
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("student.ser"));
            oos.writeObject(student);
            oos.close();
            System.out.println("Student object serialized successfully!");

            // Deserialization
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("student.ser"));
            Student deserializedStudent = (Student) ois.readObject();
            ois.close();

            System.out.println("\nDeserialized Student Information:");
            deserializedStudent.displayInfo();

        } catch (Exception e) {
            System.out.println("Error during serialization/deserialization: " + e.getMessage());
        }
    }

    // ------------------- PART C -------------------
    private static void employeeMenu(Scanner sc) {
        int choice;
        do {
            System.out.println("\n===== Employee Management System =====");
            System.out.println("1. Add Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Back to Main Menu");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1 -> addEmployee(sc);
                case 2 -> displayEmployees();
                case 3 -> System.out.println("Returning to Main Menu...");
                default -> System.out.println("Invalid choice!");
            }
        } while (choice != 3);
    }

    private static void addEmployee(Scanner sc) {
        try {
            System.out.print("Enter Employee ID: ");
            int id = sc.nextInt();
            sc.nextLine();

            System.out.print("Enter Name: ");
            String name = sc.nextLine();

            System.out.print("Enter Designation: ");
            String designation = sc.nextLine();

            System.out.print("Enter Salary: ");
            double salary = sc.nextDouble();

            Employee emp = new Employee(name, id, designation, salary);

            BufferedWriter writer = new BufferedWriter(new FileWriter(EMPLOYEE_FILE, true));
            writer.write(emp.toString());
            writer.newLine();
            writer.close();

            System.out.println("Employee added successfully!");

        } catch (IOException e) {
            System.out.println("Error while writing to file.");
        }
    }

    private static void displayEmployees() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(EMPLOYEE_FILE));
            String line;
            System.out.println("\n===== Employee Records =====");
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            reader.close();
        } catch (FileNotFoundException e) {
            System.out.println("No employee records found.");
        } catch (IOException e) {
            System.out.println("Error while reading from file.");
        }
    }
}
